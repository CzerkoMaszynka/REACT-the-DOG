{"version":3,"sources":["Components/SearchBar/index.jsx","Components/BreedList/index.js","Components/UnderSearchBarImg/index.jsx","Components/RandomDog/index.jsx","Components/BreedDropDown/index.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","breed","this","props","autoComplete","onChange","e","setDogBreed","target","value","type","name","placeholder","React","Component","breedStyle","border","backgroundColor","cursor","breedList","onInputBreedClick","style","width","filter","el","includes","map","onClick","UnderSearchBarImg","singleImgUrl","dogImg","key","src","alt","RandomDog","randomImgUrl","onRandomBreedClick","console","log","BreedDropDown","dropDownImgUrl","onDropDownClick","onDropDownBtnClick","keys","Object","DogListAll","App","state","isLoading","error","fetch","then","res","json","data","setState","message","BreedList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8ca9a13.chunk.js","sourcesContent":["import React from \"react\";\n\nclass SearchBar extends React.Component {\n  render() {\n    const { breed } = this.props;\n    return (\n      <input\n        autoComplete=\"off\"\n        onChange={e => this.props.setDogBreed(e.target.value)}\n        value={breed}\n        type=\"text\"\n        name=\"dogsearch\"\n        placeholder=\"Type breed name e.g. vizsla\"\n      />\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from \"react\";\n\nconst breedStyle = {\n  border: \"1px solid black\",\n  backgroundColor: \"lightpink\",\n  cursor: \"pointer\"\n};\n\nexport default ({ breed, breedList, onInputBreedClick }) => (\n  <div style={{ width: \"181px\" }}>\n    {breedList\n      .filter(el => breed !== \"\" && el.includes(breed))\n      .map(el => (\n        <div onClick={() => onInputBreedClick(el)} style={breedStyle}>\n          {el}\n        </div>\n      ))}\n  </div>\n);\n","import React from \"react\";\n\nclass UnderSearchBarImg extends React.Component {\n  render() {\n    const { singleImgUrl } = this.props;\n    // const {isLoading, error} = this.state;\n    // if (error) {\n    //   return <p>{error.message}</p>\n    // }\n    // if (isLoading) {\n    //   return <p>Loading...</p>;\n    // } else {\n    return (\n      <div>\n        {singleImgUrl.map(dogImg => (\n          <img key={dogImg} src={dogImg} alt=\"dog\" />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default UnderSearchBarImg;\n","import React from \"react\";\n\nclass RandomDog extends React.Component {\n  render() {\n    const { randomImgUrl, onRandomBreedClick } = this.props;\n    console.log(randomImgUrl);\n    if (randomImgUrl === \"\") {\n      return <button onClick={onRandomBreedClick}>Wygeneruj zdjęcie</button>;\n    } else {\n      return (\n        <>\n          <button onClick={onRandomBreedClick}>Wygeneruj zdjęcie</button>\n          <img src={randomImgUrl} alt=\"dog\" />\n        </>\n      );\n    }\n  }\n}\n\nexport default RandomDog;\n","import React from \"react\";\n\nclass BreedDropDown extends React.Component {\n  render() {\n    const {\n      dropDownImgUrl,\n      onDropDownClick,\n      breedList,\n      onDropDownBtnClick\n    } = this.props;\n    if (dropDownImgUrl !== \"\") {\n      return (\n        <>\n          <select onChange={e => onDropDownClick(e.target.value)}>\n            {breedList.map(breed => (\n              <option key={breed} value={breed}>\n                {breed}\n              </option>\n            ))}\n          </select>\n          <button onClick={onDropDownBtnClick}>Wygeneruj psa</button>\n          <img src={dropDownImgUrl} alt=\"dog\" />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <select onChange={e => onDropDownClick(e.target.value)}>\n            {breedList.map(breed => (\n              <option key={breed} value={breed}>\n                {breed}\n              </option>\n            ))}\n          </select>\n        </>\n      );\n    }\n  }\n}\n\nexport default BreedDropDown;\n","import React from \"react\";\nimport \"./App.css\";\nimport DogListAll from \"./Config/DogBreedsAll\";\nimport SearchBar from \"./Components/SearchBar\";\nimport BreedList from \"./Components/BreedList\";\nimport UnderSearchBarImg from \"./Components/UnderSearchBarImg\";\nimport RandomDog from \"./Components/RandomDog\";\nimport BreedDropDown from \"./Components/BreedDropDown\";\n\nconst keys = Object.keys(DogListAll);\n\nclass App extends React.Component {\n  state = {\n    breed: \"\",\n    randomImgUrl: \"\",\n    dropDownImgUrl: \"\",\n    singleImgUrl: [],\n    isLoading: false,\n    error: null\n  };\n\n  onInputBreedClick = el => {\n    fetch(`https://dog.ceo/api/breed/${el}/images`)\n      // .then(res => {\n      //   if (res.ok) {\n      //     return res.json();\n      //   } else {\n      //     throw new Error(\"Something went wrong...\");\n      //   }\n      //   })\n      .then(res => res.json())\n      .then(data => this.setState({ singleImgUrl: data.message, breed: el }));\n  };\n\n  onRandomBreedClick = () => {\n    fetch(\"https://dog.ceo/api/breeds/image/random\")\n      .then(res => res.json())\n      .then(data => this.setState({ randomImgUrl: data.message }));\n  };\n\n  onDropDownClick = breed => {\n    fetch(`https://dog.ceo/api/breed/${breed}/images/random`)\n      .then(res => res.json())\n      .then(data =>\n        this.setState({ dropDownImgUrl: data.message, breed: breed})\n      );\n  };\n\n  onDropDownBtnClick = () => {\n    fetch(`https://dog.ceo/api/breed/${this.state.breed}/images/random`)\n      .then(res => res.json())\n      .then(data =>\n        this.setState({ dropDownImgUrl: data.message })\n    );\n  }\n\n  setDogBreed = value => {\n    this.setState({\n      breed: value\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <RandomDog\n          randomImgUrl={this.state.randomImgUrl}\n          onRandomBreedClick={this.onRandomBreedClick}\n        />\n        <BreedDropDown\n          dropDownImgUrl={this.state.dropDownImgUrl}\n          onDropDownClick={this.onDropDownClick}\n          breed={this.state.breed}\n          setDogBreed={this.setDogBreed}\n          breedList={keys}\n          onDropDownBtnClick ={this.onDropDownBtnClick}\n        />\n        <SearchBar \n          breed={this.state.breed} \n          setDogBreed={this.setDogBreed} />\n        <BreedList\n          breed={this.state.breed}\n          breedList={keys}\n          onInputBreedClick={this.onInputBreedClick}\n        />\n\n        {/* { this.state.singleImgUrl[0] &&  <UnderSearchBarImg singleImgUrl={this.state.singleImgUrl[0]} />} */}\n        <UnderSearchBarImg singleImgUrl={this.state.singleImgUrl} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}